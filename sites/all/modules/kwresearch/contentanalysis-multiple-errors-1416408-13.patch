diff --git a/contentanalysis.module b/contentanalysis.module
index bdb8a8d..0d53b2c 100644
--- a/contentanalysis.module
+++ b/contentanalysis.module
@@ -3,7 +3,7 @@
 
 /**
  * @file
- * Provides API to enable analyzer modules to interface with web content and display an analysis 
+ * Provides API to enable analyzer modules to interface with web content and display an analysis
  */
 
 //require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'contentanalysis') . "/includes/seo_friend.inc";
@@ -53,7 +53,7 @@ function contentanalysis_menu() {
     'access callback' => 'user_access',
     'access arguments' => array('perform content analysis'),
     'type' => MENU_NORMAL_ITEM,
-  );  
+  );
   $items['contentanalysis/analyze_js'] = array(
     'title' => '',
     'page callback' => 'contentanalysis_analyze_js',
@@ -87,7 +87,7 @@ function contentanalysis_menu() {
 
 function contentanalysis_util() {
 
-return 'ok'; 
+return 'ok';
 	$node = node_load(2);
  $options = array(
     'entity_type' => 'node',
@@ -176,20 +176,20 @@ function contentanalysis_modal_popup_only() {
  */
 function contentanalysis_page_analyzer() {
   drupal_add_css(drupal_get_path('module', 'contentanalysis') . '/contentanalysis.admin.css');
-  
-  $output = render(drupal_get_form('contentanalysis_page_analyzer_form', array()));  
-  
+
+  $output = render(drupal_get_form('contentanalysis_page_analyzer_form', array()));
+
   return $output;
 }
 
 /**
  * Provides content analysis admin form
- * 
+ *
  * - prepends three admin form input fields
  * - merges form from contentanalysis_analysis_form()
- * 
+ *
  * @see contentanalysis_analysis_form()
- * 
+ *
  * @param $form_state
  *   standard form_api form_state array
  * @param $analysis
@@ -203,7 +203,7 @@ function contentanalysis_page_analyzer_form($form_state, $analysis) {
   );
   $form['input'] = array(
     '#type' => 'textarea',
-    '#title' => t('Content'),    
+    '#title' => t('Content'),
     '#default_value' => isset($analysis['#context']['inputs']['text']) ? $analysis['#context']['inputs']['text'] : '',
   );
   $form['input_nid'] = array(
@@ -217,21 +217,21 @@ function contentanalysis_page_analyzer_form($form_state, $analysis) {
     '#title' => t('URL'),
     '#default_value' => isset($analysis['#context']['inputs']['url']) ? $analysis['#context']['inputs']['url'] : '',
   );
-  
+
   $form = array_merge($form, contentanalysis_analysis_form($form_state, $analysis, array(), 'admin'));
- 
+
   return $form;
 }
 
 /**
  * Provides common Content Analysis form fields
- * 
+ *
  * - creates checkboxes of installed analyzers
- * - requests additional fields from analyzer modules for analyzer 
+ * - requests additional fields from analyzer modules for analyzer
  *   definitions declaring "form elements callback"
  * - initializes Drupal.settings for AJAX calls
  * - formats fields according to the requested interface
- * 
+ *
  * @param $form_state
  *   standard form_state generated by form_api
  * @param $analysis
@@ -242,25 +242,25 @@ function contentanalysis_page_analyzer_form($form_state, $analysis) {
  *   The style of form to return, options are [admin|node-edit|block]
  * @return
  *   form_api formated array
- *   
+ *
  */
 function contentanalysis_analysis_form($form_state, $analysis = array(), $node = array(), $mode = 'admin') {
   // check the number of calls
-  
+
   drupal_add_js(drupal_get_path('module', 'contentanalysis') . '/contentanalysis.js');
   ctools_include('ajax'); // Module  include the dependence it needs for ajax.
   ctools_include('modal');
   ctools_modal_add_js();
   ctools_add_js('ajax-responder');
-  
+
   $fields = array();
-  
-  drupal_add_css(drupal_get_path('module', 'contentanalysis') . '/contentanalysis.css');  
+
+  drupal_add_css(drupal_get_path('module', 'contentanalysis') . '/contentanalysis.css');
   $display = variable_get('contentanalysis_display', array('sections', 'main'));
   $analyzers = contentanalysis_analyzer_info();
   $analyzer_modules = array();
-  
-  foreach ($analyzers AS $aid => $analyzer) {
+
+  foreach ($analyzers as $aid => $analyzer) {
     if ($analyzer['module']) {
       $analyzer_modules[$aid] = array(
         'aid' => $aid,
@@ -295,28 +295,28 @@ function contentanalysis_analysis_form($form_state, $analysis = array(), $node =
         'node_type' => isset($node->type) ? $node->type : -1,
         'display_sections' => ((isset($display['sections']) && $display['sections'] )?1:0),
         'display_main' => ((isset($display['main']) && $display['main'])?1:0),
-        'analyze_on_start' => variable_get('contentanalysis_analyze_on_start', '0'),    
+        'analyze_on_start' => variable_get('contentanalysis_analyze_on_start', '0'),
         'analyzer_modules' => $analyzer_modules,
         'code' => $code,
         'display_dialog' => $display_dialog,
         'display_inline' => $display_inline,
-      )), 
+      )),
     'setting');
     $js_added = TRUE;
   }
-  
+
   $fields['analyzers'] = contentanalysis_get_analyzer_form_element($analysis, $analyzers);
 
-  foreach ($analyzers AS $aid => $analyzer) {
+  foreach ($analyzers as $aid => $analyzer) {
     if (isset($analyzer['form elements callback']) && $analyzer['form elements callback']) {
-      $e = call_user_func($analyzer['form elements callback'], $form_state, $analysis, $node); 
-      if (is_array($e)) {        
+      $e = call_user_func($analyzer['form elements callback'], $form_state, $analysis, $node);
+      if (is_array($e)) {
         $fs = array(
           '#type' => 'fieldset',
           '#title' => $analyzer['title'] . ' ' . t('analyzer options'),
           '#tree' => TRUE,
         );
-        $fields[$aid] = array_merge($fs, $e);        
+        $fields[$aid] = array_merge($fs, $e);
       }
     }
   }
@@ -334,13 +334,13 @@ function contentanalysis_analysis_form($form_state, $analysis = array(), $node =
       $form['clickme'] = array(
         '#type' => 'markup',
         '#markup' => '<div id="contentanalysis-buttons">' .   $output = ctools_ajax_text_button(t('Analyze content'), 'contentanalysis/ajax/analysis_only', t('Content Analysis'), 'contentanalysis-button', 'ctools-use-modal') . '</div>'
-      ); 
-    } 
+      );
+    }
     elseif ($report_style == 'inline') {
       $form['clickme'] = array(
         '#type' => 'markup',
         '#markup' => '<div id="contentanalysis-buttons">' . l(t('Analyze content'), base_path() . 'contentanalysis/analyze_js', array('attributes' => array('id' => 'contentanalysis-ininline-analysis-button', 'class' => "contentanalysis-analyze-content contentanalysis-button", "onclick" => "contentanalysis_inline_analysis(); return (false);"))) . '</div>'
-      );    
+      );
     }
     else {
       $v = '<div id="contentanalysis-buttons">';
@@ -355,38 +355,38 @@ function contentanalysis_analysis_form($form_state, $analysis = array(), $node =
       $form['clickme'] = array(
         '#type' => 'markup',
         '#markup' => $v,
-      ); 
+      );
     }
-  } 
+  }
   elseif ($mode == 'admin') {
     $form = $fields;
     $form['clickme'] = array(
       '#type' => 'markup',
       '#markup' => '<div>' . $output = ctools_ajax_text_button(t('Analyze content'), 'contentanalysis/ajax/analysis', t('Content Analysis'), 'contentanalysis-button', 'ctools-use-modal') . '</div>'
-    );  
-  } 
+    );
+  }
   else {
     $form['clickme'] = array(
       '#type' => 'markup',
       '#markup' => '<div>' . $output = ctools_ajax_text_button(t('Analyze content'), 'contentanalysis/ajax/analysis', t('Content Analysis'), 'contentanalysis-button', 'ctools-use-modal') . '</div>'
     );
-    
+
     $form['contentanalysis_options'] = array(
       '#title' => t('options'),
       '#type' => 'fieldset',
       '#collapsible' => TRUE,
       '#collapsed' => TRUE,
-      
-    ); 
+
+    );
     $form['contentanalysis_options'] = array_merge($form['contentanalysis_options'], $fields);
   }
-  
+
   return $form;
 }
 
 /**
  * Generates analyzer enable/disable checkboxes field
- * 
+ *
  * @param $params
  *   Associative array of overrides for settings. Overrides include: [title|description|nid]
  * @param $analyzers
@@ -400,7 +400,7 @@ function contentanalysis_get_analyzer_form_element($params = array(), $analyzers
     // don't show checkboxes if only one analyzer
     $options = array();
     $defaults = array();
-    foreach ($analyzers AS $aid => $analyzer) {
+    foreach ($analyzers as $aid => $analyzer) {
       $options[$aid] = $analyzer['title'];
       $defaults[] = $aid;
     }
@@ -409,7 +409,7 @@ function contentanalysis_get_analyzer_form_element($params = array(), $analyzers
       foreach ($analysis['#context']['inputs']['analyzers'] AS $aid => $item) {
         $default_value[] = $aid;
       }
-    } 
+    }
     else {
       $default_value = variable_get('contentanalysis_default_analyzers', $defaults);
     }
@@ -418,24 +418,24 @@ function contentanalysis_get_analyzer_form_element($params = array(), $analyzers
       $k = array_keys($options);
       $element = array(
         '#type' => 'hidden',
-        '#value' => $k[0], 
+        '#value' => $k[0],
         '#prefix' => '<div id="contentanalysis_analyzers_override">',
         '#suffix' => '</div>',
       );
-    } 
+    }
     else {
       $element = array(
         '#type' => 'checkboxes',
-        '#title' => (isset($params['title']) && $params['title'])?$params['title']:t('Analyzers'), 
+        '#title' => (isset($params['title']) && $params['title'])?$params['title']:t('Analyzers'),
         '#description' => (isset($params['description']) && $params['description'])?$params['description']:t('Select analyzers for content.'),
         '#options' => $options,
-        '#default_value' => $default_value, 
+        '#default_value' => $default_value,
         '#prefix' => '<div id="contentanalysis_analyzers">',
         '#suffix' => '</div>',
       );
     }
 
-  } 
+  }
   else {
     drupal_set_message(t('No content analyzers are enabled.'), 'error');
     return FALSE;
@@ -445,13 +445,13 @@ function contentanalysis_get_analyzer_form_element($params = array(), $analyzers
 
 /**
  * Returns content analysis for AJAX calls
- * 
+ *
  * - initializes context from AJAX _POST data
  * - submits context to contentanalysis_do_analysis for analysis
  * - formats returned analysis
- * 
+ *
  * @see contentanalysis_do_analysis()
- * 
+ *
  * @return
  *   JSON formated analysis
  */
@@ -464,7 +464,7 @@ function contentanalysis_analyze_js() {
 
   $context = contentanalysis_get_default_context();
   $context['form_id'] = 'contentanalysis_analyze_js';
-  
+
   $context['inputs']['nid'] = ($_POST['nid']=='-1')?NULL:$_POST['nid'];
   $context['inputs']['url'] = ($_POST['url']=='-1')?NULL:$_POST['url'];
   $context['inputs']['title'] = ($_POST['title']=='-1')?NULL:$_POST['title'];
@@ -473,20 +473,20 @@ function contentanalysis_analyze_js() {
   $context['inputs']['body'] = ($_POST['body']=='-1')?NULL:$_POST['body'];
   $context['inputs']['body_summary'] = ($_POST['body_summary']=='-1')?NULL:$_POST['body_summary'];
   $context['inputs']['meta_keywords'] = ($_POST['meta_keywords']=='-1')?NULL:$_POST['meta_keywords'];
-  $context['inputs']['meta_description'] = ($_POST['meta_description']=='-1')?NULL:$_POST['meta_description']; 
+  $context['inputs']['meta_description'] = ($_POST['meta_description']=='-1')?NULL:$_POST['meta_description'];
   $context['inputs']['page'] = ($_POST['page']=='-1')?NULL:$_POST['page'];
   $context['inputs']['node_type'] = ($_POST['node_type']=='-1')?NULL:$_POST['node_type'];
   $context['inputs']['body_input_filter'] = (!isset($_POST['body_input_filter']) || $_POST['body_input_filter'] == '-1') ? NULL : $_POST['body_input_filter'];
-  $context['inputs']['hidden'] = ($_POST['hidden']=='-1')?NULL:$_POST['hidden'];  
-  $context['inputs']['action'] = ($_POST['action']=='-1')?NULL:$_POST['action']; 
-  
-  $context['source'] = $_POST['source'];  
+  $context['inputs']['hidden'] = ($_POST['hidden']=='-1')?NULL:$_POST['hidden'];
+  $context['inputs']['action'] = ($_POST['action']=='-1')?NULL:$_POST['action'];
+
+  $context['source'] = $_POST['source'];
   $context['nid'] = $context['inputs']['nid'];
-  $context['url'] = $context['inputs']['url'];    
-  
+  $context['url'] = $context['inputs']['url'];
+
   // load analyzers using hook_contentanalysis_analyzers
   $analyzer_defs = contentanalysis_analyzer_info();
-  
+
   $analyzers = array();
   $a = explode(',', $_POST['analyzers']);
   $context['inputs']['analyzers'] = array();
@@ -496,43 +496,43 @@ function contentanalysis_analyze_js() {
       $analyzers[$aid] = $analyzer_defs[$aid];
     }
   }
-  
+
   foreach ($_POST AS $k => $v) {
     if (substr($k, 0, 3) == 'ao_') {
       list($t, $aid, $vk) = explode('_', $k);
       $context['inputs']['analyzer_options'][$aid][$vk] = $v;
-    } 
+    }
   }
-  
+
   $context['title'] = $context['inputs']['title'];
   $context['page_title'] = $context['inputs']['page_title'];
   $context['body'] = $context['inputs']['body'];
   $context['meta_title'] = $context['inputs']['meta_title'];
   $context['meta_keywords'] = $context['inputs']['meta_keywords'];
   $context['meta_description'] = $context['inputs']['meta_description'];
-  $context['page'] = $context['inputs']['page'];  
-  
+  $context['page'] = $context['inputs']['page'];
+
   if (isset($context['options']) && isset($context['options']['exit'])) {
     $analysis['#context'] = $context;
-  } 
+  }
   else {
     // if url is input from admin form, go fetch the page contents
     if (($context['source'] == 'admin-form') && ($context['url']) && !$context['nid'] && !$context['body']) {
-     $context['page'] =  file_get_contents($context['url']);     
+     $context['page'] =  file_get_contents($context['url']);
     }
-    
+
     $analysis = contentanalysis_do_analysis($context, $analyzers);
-    
-    foreach ($analyzers AS $aid => $analyzer) {
-      if ($analyzer['admin form submit callback']) {
-        call_user_func($analyzer['admin form submit callback'], $form, $form_state);   
+
+    foreach ($analyzers as $aid => $analyzer) {
+      if (!empty($analyzer['admin form submit callback'])) {
+        call_user_func($analyzer['admin form submit callback'], $form, $form_state);
       }
-    } 
-    
+    }
+
     $analysis = contentanalysis_build_analysis_content($analysis);
     contentanalysis_save_status($analysis);
   }
-  
+
   $output = array();
   $output['main']['output'] = theme_contentanalysis_analysis($analysis);
   $output['page_title']['output'] = theme_contentanalysis_section_analysis($analysis, 'page_title');
@@ -540,7 +540,7 @@ function contentanalysis_analyze_js() {
   $output['meta_keywords']['output'] = theme_contentanalysis_section_analysis($analysis, 'meta_keywords');
   $output['meta_description']['output'] = theme_contentanalysis_section_analysis($analysis, 'meta_description');
   $output['inputs']['analyzers'] = implode(",", $analysis['#context']['inputs']['analyzers']);
-  
+
   $output['inputs']['action'] = $analysis['#context']['inputs']['action'];
 
 //dsm($output);
@@ -553,10 +553,10 @@ function contentanalysis_save_status($analysis) {
   	return;
   }
   foreach ($analysis AS $anid => $analysisi) {
-    if (substr($anid, 0, 1)=='#' || !is_array($analysisi)) { 
-      continue; 
+    if (substr($anid, 0, 1)=='#' || !is_array($analysisi)) {
+      continue;
     }
-    if((isset($analysisi['#status']) && ($analysisi['#status'] != 'status')) || ($analysisi['#score'])) {
+    if ((isset($analysisi['#status']) && ($analysisi['#status'] != 'status')) || (!empty($analysisi['#score']))) {
 		  $statusi = array(
 	      'error' => 0,
 			  'warning' => 1,
@@ -566,17 +566,17 @@ function contentanalysis_save_status($analysis) {
 		    'status' => $analysisi['#status'],
 		    'statusi' => $statusi[$analysisi['#status']],
 		  );
-		  if($analysisi['#score']) {
+		  if(!empty($analysisi['#score'])) {
 		    $fields['score'] = $analysisi['#score'];
 		  }
 		  $keys = array(
         'aid' => $aid,
-        'analyzer' => $anid,		  
+        'analyzer' => $anid,
 		  );
 		  $query = db_merge('contentanalysis_status')
 		    ->key($keys)
 		    ->fields($fields);
-		    
+
 		  $updated = $query->execute();
     }
   }
@@ -584,7 +584,7 @@ function contentanalysis_save_status($analysis) {
 
 /**
  * Provides initial format for context associative array
- * 
+ *
  * @return
  *   Initialized context associative array
  */
@@ -612,47 +612,47 @@ function contentanalysis_get_default_context() {
 
 /**
  * Inspects context to select a normalizing context parser
- * 
+ *
  * @param $the_context
  *   Initialized contentalaysis context formated array
- *   
- * 
+ *
+ *
  * @return
  *   A normalized context array
  */
 function contentanalysis_parse_context($the_context, $analysis) {
-  
+
   $context = contentanalysis_get_default_context();
-  
-  if (is_array($the_context)) {   
+
+  if (is_array($the_context)) {
     $context = array_merge($context, $the_context);
   }
 
   // select which parser to use
   if ($context['source'] == 'node-edit-form') {
     return contentanalysis_parse_context_node_edit($context, $analysis);
-  } 
+  }
   elseif ($context['nid'] > 0) { // analysis by nid
     return contentanalysis_parse_context_node_load($context, $analysis);
-  } 
+  }
   elseif ($context['body']) { // analysis by direct text input
     $context['body_notags'] = strip_tags($context['body']);
-  } 
+  }
   elseif ($context['page']) { // analysis by url
     return contentanalysis_parse_context_page($context, $analysis);
   }
-  
-  return $context; 
- 
+
+  return $context;
+
 }
 
 
 /**
  * Normalizes context data inputed by node edit form
- * 
+ *
  * @param $the_context
  *   Initialized context formated array
- * 
+ *
  * @return
  *   A normalized context array
  */
@@ -660,7 +660,7 @@ function contentanalysis_parse_context_node_edit($context, &$analysis) {
   // create dumby node from inputs
   if ($context['nid'] && is_numeric($context['nid'])) {
     $context['node'] = node_load($context['nid']);
-  } 
+  }
   if (!isset($context['node']) && !$context['node']) {
     $context['node'] = new stdClass();
     $context['node']->type = 'article';
@@ -668,7 +668,7 @@ function contentanalysis_parse_context_node_edit($context, &$analysis) {
     $context['node']->language = LANGUAGE_NONE;
   }
 
-  
+
   $context['node']->title = $context['title'];
   $context['node']->body[$context['node']->language][0]['value']   = $context['body'];
   // get teaser trim length if available from field
@@ -701,12 +701,12 @@ function contentanalysis_parse_context_node_edit($context, &$analysis) {
     }
     $context['body'] = $h . "\n" . $context['body'];
   }
-  
+
   $context['body_notags'] = strip_tags($context['body']);
-  
+
   if (!$context['page_title']) {
     $context['page_title'] = $context['title'];
-  } 
+  }
   if (is_null($context['path'])) {
     $path = 'node/' . $context['nid'];
     $path_alias = drupal_get_path_alias($path);
@@ -721,7 +721,7 @@ function contentanalysis_parse_context_node_edit($context, &$analysis) {
     $url .= "://";
     if ($_SERVER["SERVER_PORT"] != "80") {
       $url .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"];
-    } 
+    }
     else {
       $url .= $_SERVER["SERVER_NAME"];
     }
@@ -729,7 +729,7 @@ function contentanalysis_parse_context_node_edit($context, &$analysis) {
     $url .= $context['path'];
     $context['url'] = $url;
   }
-  
+
   // get metatag context
   $context = contentanalysis_parse_context_metatags($context);
   return $context;
@@ -737,10 +737,10 @@ function contentanalysis_parse_context_node_edit($context, &$analysis) {
 
 /**
  * Normalizes context data inputed from the node_load function
- * 
+ *
  * @param $context
  *   Initialized context formated array
- * 
+ *
  * @return
  *   A normalized context array
  */
@@ -771,34 +771,34 @@ function contentanalysis_parse_context_node_load($context, &$analysis) {
     $context_page_title = $context['title'];
     if (module_exists('page_title')) {
       $page_title_pattern = variable_get('page_title_type_'. (isset($node->type) ? $node->type : ''), '');
-  
+
       if (empty($page_title_pattern)) {
         $page_title_pattern = variable_get('page_title_default', '[current-page:page-title] | [site:name]');
       }
-      
+
       //$page_title_pattern = str_replace('[page-title]', (($context_page_title && (!is_null($context_page_title)))?$context_page_title:$context_title), $page_title_pattern);
       //$page_title_pattern = str_replace('[title]', check_plain($context_title), $page_title_pattern);
       //$page_title_pattern = str_replace('[title-raw]', $context_title, $page_title_pattern);
-  
+
       $types = array();
-  
+
       if (isset($node)) {
         $types['node'] = $node;
       }
-  
+
       $types['page_title'] = NULL;
       $context['page_title'] = token_replace($page_title_pattern, $types);
     }
-  } 
+  }
   else {
     $context['page_title'] = ($context['title'])?$context['title']:$node->title;
   }
- 
+
   $context['node_body'] = $context['body'];
   $node_view = node_view($context['node']);
 
   $context['body'] = $node_view['body'][0]['#markup'];
-  
+
   // prepend node title
   if (variable_get('contentanalysis_node_parse_nodetitle_prepend', CONTENTANALYSIS_NODE_PARSE_NODETITLE_PREPEND_DEFAULT)) {
     $h = $context['title'];
@@ -808,11 +808,11 @@ function contentanalysis_parse_context_node_load($context, &$analysis) {
     }
     $context['body'] = $h . "\n" . $context['body'];
   }
-  
+
   if (is_null($context['body_notags'])) {
     $context['body_notags'] = strip_tags($context['body']);
-  }  
-  
+  }
+
   // get metatag context
   if (isset($node->metatags['keywords']['value'])) {
   	$context['meta_keywords'] = $node->metatags['keywords']['value'];
@@ -836,7 +836,7 @@ function contentanalysis_parse_context_node_load($context, &$analysis) {
     $url .= "://";
     if ($_SERVER["SERVER_PORT"] != "80") {
       $url .= $_SERVER["SERVER_NAME"] . ":" . $_SERVER["SERVER_PORT"];
-    } 
+    }
     else {
       $url .= $_SERVER["SERVER_NAME"];
     }
@@ -850,10 +850,10 @@ function contentanalysis_parse_context_node_load($context, &$analysis) {
 
 /**
  * Normalizes context data inputed as a complete xHTML document
- * 
+ *
  * @param $the_context
  *   Initialized context formated array
- * 
+ *
  * @return
  *   A normalized context array
  */
@@ -863,7 +863,7 @@ function contentanalysis_parse_context_page($context, &$analysis) {
   if (!$context['page']) {
     return $context;
   }
-  $count = preg_match('/<title>(.+?)<\/title>/isx', $context['page'], $match); 
+  $count = preg_match('/<title>(.+?)<\/title>/isx', $context['page'], $match);
   $context['page_title'] =  $match[1];
   //$count = preg_match('/(<meta name="keywords" content="(.*)" \/>)/i', $context['page'] ,$match);  // value in $match [2]
   $count = preg_match("|<meta[^>]*keywords[^>]*content=\"([^>]+)\"[^>]*>|Ui", $context['page'], $match);
@@ -871,10 +871,10 @@ function contentanalysis_parse_context_page($context, &$analysis) {
   //$count = preg_match('/(<meta name=\"description\" content="(.*)" \/>)/i', $context['page'], $match); // value in $match [2]
   $count = preg_match("|<meta[^>]*description[^>]*content=\"([^>]+)\"[^>]*>|Ui", $context['page'], $match);
   $context['meta_description'] =  $match[1];
-  $count = preg_match('/(<body.*>)(.+?)(<\/body>)/ismU', $context['page'], $match); 
+  $count = preg_match('/(<body.*>)(.+?)(<\/body>)/ismU', $context['page'], $match);
   $context['body'] =  $match[2];
   $context['body_notags'] = strip_tags($context['body']);
-  
+
   return $context;
 }
 
@@ -905,12 +905,12 @@ function contentanalysis_parse_context_metatags($context) {
         'value' => $context['meta_description'],
       );
     }
-    
-    $nodemeta = metatag_metatags_view('node:' . $context['node']->type , $metatags, $options); 
-    $globalmeta = metatag_metatags_view('global', array(), $options); 
+
+    $nodemeta = metatag_metatags_view('node:' . $context['node']->type , $metatags, $options);
+    $globalmeta = metatag_metatags_view('global', array(), $options);
 
     if (isset($nodemeta['title']['#attached']['metatag_set_preprocess_variable'][0][2])) {
-      $context['meta_title'] = $nodemeta['title']['#attached']['metatag_set_preprocess_variable'][0][2]; 
+      $context['meta_title'] = $nodemeta['title']['#attached']['metatag_set_preprocess_variable'][0][2];
     }
     if (isset($nodemeta['keywords']['#attached']['drupal_add_html_head'][0][0]['#value'])) {
       $context['meta_keywords'] = $nodemeta['keywords']['#attached']['drupal_add_html_head'][0][0]['#value'];
@@ -937,7 +937,7 @@ function contentanalysis_get_analyzer_settings($analyzer_name) {
   $all_settings = variable_get('contentanalysis_analyzer_settings', array());
   if (isset($all_settings[$analyzer_name]) && is_array($all_settings[$analyzer_name])) {
     $settings = $all_settings[$analyzer_name];
-  }	
+  }
   if (isset($analyzer_defs[$analyzer_name]['settings'])) {
     $settings += $analyzer_defs[$analyzer_name]['settings'];
   }
@@ -946,16 +946,16 @@ function contentanalysis_get_analyzer_settings($analyzer_name) {
 
 /**
  * Provides analysis on context passed in
- * 
+ *
  * - Normalizes the context
  * - Passes context to analyzer modules' "callback" declaired in analyzer definition
- * 
+ *
  * @param unknown_type $context
  * @param unknown_type $analyzers
  * @param unknown_type $analyzers_params
  */
 function contentanalysis_do_analysis($context, $analyzers = NULL, $analyzers_params = array()) {
-  $analysis = array();  
+  $analysis = array();
 	$analysis_struc = array(
     '#title' => '',
     '#status' => 'status',
@@ -966,10 +966,10 @@ function contentanalysis_do_analysis($context, $analyzers = NULL, $analyzers_par
     'page_title' => array('#title' => t('Page title'), '#status' => 'status'),
     'body' => array('#title' => t('Body'), '#status' => 'status'),
     'meta_keywords' => array('#title' => t('Meta keywords'), '#status' => 'status'),
-    'meta_description' => array('#title' => t('Meta description'), '#status' => 'status'), 
+    'meta_description' => array('#title' => t('Meta description'), '#status' => 'status'),
   );
   // change structure if content is directly inputed without a full page
-  
+
   if ($context['source'] == 'admin') {
     if (!$context['inputs']['nid'] && !$context['inputs']['body'] && !$context['inputs']['url']) {
       $analysis = $analysis_struc;
@@ -977,7 +977,7 @@ function contentanalysis_do_analysis($context, $analyzers = NULL, $analyzers_par
       return $analysis;
     }
   }
-  
+
   $context = contentanalysis_parse_context($context, $analysis);
 
   // get analyzer settings
@@ -985,15 +985,15 @@ function contentanalysis_do_analysis($context, $analyzers = NULL, $analyzers_par
   	$settings = contentanalysis_get_analyzer_settings($analyzer_name);
   	$context['analyzers'][$analyzer_name]['settings'] = $settings;
   }
- 
+
   // allow modules to alter context
   //drupal_alter('contentanalysis_context_parser', $context);
   drupal_alter('contentanalysis_context', $context, $analyzers);
 
-  // save data to db 
+  // save data to db
   $save = isset($context['options']['dontsave']) ? 0 : 1;
   $context['aid'] = contentanalysis_get_aid($context, $save);
-  
+
   // change section labels if content is directly inputed
   if (($context['source'] == 'admin-form') && is_null($context['inputs']['url']) && is_null($context['inputs']['nid'])) {
     $analysis_struc['body']['#title'] = t('Text');
@@ -1002,13 +1002,13 @@ function contentanalysis_do_analysis($context, $analyzers = NULL, $analyzers_par
     unset($analysis_struc['meta_keywords']);
     unset($analysis_struc['meta_description']);
   }
-  
-  
+
+
   $analysis['#context'] = $context;
 
-  foreach ($analyzers AS $aid => $analyzer) {
+  foreach ($analyzers as $aid => $analyzer) {
     $analysis_struc['#title'] = $analyzer['title'];
-    $analysis[$aid] = call_user_func($analyzer['callback'], $context, $analysis_struc, isset($analyzers_params[$aid]) ? $analyzers_params[$aid] : NULL);  
+    $analysis[$aid] = call_user_func($analyzer['callback'], $context, $analysis_struc, isset($analyzers_params[$aid]) ? $analyzers_params[$aid] : NULL);
   }
 
   // do quickstart analysis if no analyzers are enabled
@@ -1017,14 +1017,14 @@ function contentanalysis_do_analysis($context, $analyzers = NULL, $analyzers_par
     $analysis['contentanalysis'] = contentanalysis_checklist_analyzer($context, $analysis_struc);
   }
 
-  drupal_alter('contentanalysis_analysis', $analysis, $context);  
+  drupal_alter('contentanalysis_analysis', $analysis, $context);
 
   return $analysis;
 }
 
 /**
  * Generates checklist analyzer
- * 
+ *
  * @param $context
  *   A context formated array
  * @param $analysis
@@ -1082,7 +1082,7 @@ function contentanalysis_checklist_analyzer($context, $analysis) {
     $status = 'status';
     $msg_vars = array(
       '@module_name' => $module['name'],
-      '!enabled_status' => '',   
+      '!enabled_status' => '',
     );
     if (module_exists($module['module'])) {
       $msg_vars['!enabled_status'] = t('enabled');
@@ -1090,7 +1090,7 @@ function contentanalysis_checklist_analyzer($context, $analysis) {
       if ($module['recommended']) {
         $status = 'pass';
       }
-    } 
+    }
     else {
       $msg_vars['!enabled_status'] = t('not enabled');
       $link = l(t('Click here to download.'), $module['link'], array('target' => '_drupalorg'));
@@ -1101,17 +1101,17 @@ function contentanalysis_checklist_analyzer($context, $analysis) {
     $msg = t('<strong>@module_name</strong> is !enabled_status.', $msg_vars);
     if ($link) {
       $msg .= ' ' . $link;
-    }    
+    }
     $analysis['messages'][] = contentanalysis_format_message($msg, $status);
     $analysis['messages'][] = contentanalysis_format_message($module['description'], 'status');
   }
-  
-  return $analysis; 
+
+  return $analysis;
 }
 
 /**
  * Readies analysis elements such as stats and messages as markup output
- * 
+ *
  * @param $analysis
  *   contentanalysis formated analysis array
  */
@@ -1120,8 +1120,8 @@ function contentanalysis_build_analysis_content($analysis) {
   $ignore_keys = array('content', 'context', 'stats', 'tests', 'messages');
   // create status messages table
   foreach ($analysis AS $aid => $analysisi) {
-    if (substr($aid, 0, 1)=='#' || !is_array($analysisi)) { 
-      continue; 
+    if (substr($aid, 0, 1)=='#' || !is_array($analysisi)) {
+      continue;
     }
 
     $content = theme_contentanalysis_status_report($analysisi);
@@ -1132,8 +1132,8 @@ function contentanalysis_build_analysis_content($analysis) {
     // construct content for section analysis
     $analysis[$aid]['sections'] = array();
     foreach ($analysisi AS $sid => $analysisis) {
-      if ((substr($sid, 0, 1)=='#') || in_array($sid, $ignore_keys)  ) { 
-        continue; 
+      if ((substr($sid, 0, 1)=='#') || in_array($sid, $ignore_keys)  ) {
+        continue;
       }
       $content = '';
       $analysis[$aid]['sections'][] = $sid;
@@ -1145,11 +1145,11 @@ function contentanalysis_build_analysis_content($analysis) {
         $analysis[$aid][$sid]['content'][] = array(
           '#value' => $content,
           '#weight' => 0,
-        );   
-      }   
-    }   
+        );
+      }
+    }
   }
-  
+
   $tabs = '';
   $con = '';
   foreach ($analysis AS $aid => $analysisi) {
@@ -1158,13 +1158,13 @@ function contentanalysis_build_analysis_content($analysis) {
       continue;
     }
     $analysis[$aid]['output'] = '<div id="contentanalysis-report-' . $aid . '" class="contentanalysis-report">';
-    if (isset($analysisi['content'][0]['#tab']) && $analysisi['content'][0]['#tab']) {      
+    if (isset($analysisi['content'][0]['#tab']) && $analysisi['content'][0]['#tab']) {
       $tabs = '<h3 id="contentanalysis-report-tab-' . $aid . '-0" class="contentanalysis-report-tab">' . $analysisi['content'][0]['#value'] . "</h3>\n";
-    } 
+    }
     else {
       $tabs = '<h3 id="contentanalysis-report-tab-' . $aid . '-0" class="contentanalysis-report-tab">' . t('Report') . "</h3>\n";
     }
-    
+
     uasort($analysisi['content'], "element_sort");
     $i = 0;
     $con = '<div id="contentanalysis-report-results-' . $aid . '-' . $ti .'" class="contentanalysis-results-section">';
@@ -1177,26 +1177,26 @@ function contentanalysis_build_analysis_content($analysis) {
         $con .= '</div>';
         $tabs .= '<h3  id="contentanalysis-report-tab-' . $aid . '-' . $ti .'" class="contentanalysis-report-tab">' . $item['#value'] . "</h3>\n";
         $con .= '<div id="contentanalysis-report-results-' . $aid . '-' . $ti .'" class="contentanalysis-results-section">';
-        
-      } 
+
+      }
       else {
         $con .= $item['#value'];
       }
       $i++;
     }
     $con .= '</div>';
-    
+
     $analysis[$aid]['output'] .= '<div id="contentanalysis-report-tabs-' . $aid . '" class="contentanalysis-report-tabs">';
     $analysis[$aid]['output'] .= $tabs;
     $analysis[$aid]['output'] .= '</div>';
     $analysis[$aid]['output'] .= '<div id="contentanalysis-report-results-' . $aid . '" class="contentanalysis-results">';
     $analysis[$aid]['output'] .= $con;
     $analysis[$aid]['output'] .= '</div>';
-    
+
     $analysis[$aid]['output'] .= "</div>\n";
     foreach ($analysisi['sections'] AS $sid) {
-      if (!isset($analysisi[$sid]['content']) || !is_array($analysisi[$sid]['content'])) { 
-        continue; 
+      if (!isset($analysisi[$sid]['content']) || !is_array($analysisi[$sid]['content'])) {
+        continue;
       }
       uasort($analysisi[$sid]['content'], "element_sort");
       $analysis[$aid][$sid]['output'] = '';
@@ -1206,29 +1206,29 @@ function contentanalysis_build_analysis_content($analysis) {
     }
   }
 
-  return $analysis; 
+  return $analysis;
 
 }
 
 /**
  * Themes the content analysis
- * 
+ *
  * @param $analysis
  *   contentanalysis formated analysis array
- * 
+ *
  * @return
  *  Themed content analysis
  */
-function theme_contentanalysis_analysis($analysis) { 
+function theme_contentanalysis_analysis($analysis) {
   $titles = array();
   $bodies = array();
-  if (count($analysis['#context']['messages']) > 0) {
+  if (isset($analysis['#context']['messages']) && count($analysis['#context']['messages']) > 0) {
     //$titles[] = '<h3 class="analyzer">'.t('Messages')."</h3>\n";;
     $bodies[] = theme_contentanalysis_messages($analysis['#context']['messages']);
   }
   foreach ($analysis AS $aid => $analysisi) {
-    if (!is_array($analysisi) || (substr($aid, 0, 1) == '#')) { 
-      continue;  
+    if (!is_array($analysisi) || (substr($aid, 0, 1) == '#')) {
+      continue;
     }
     $titles[] = '<h3 id="contentanalysis-analyzer-tab-' . $aid . '" class="analyzer">' . $analysisi['#title'] . "</h3>\n";
     $bodies[] = '<div class="analyzer-analysis"><h2>' . $analysisi['#title'] . '</h2>' . $analysisi['output'] . '</div>';
@@ -1242,7 +1242,7 @@ function theme_contentanalysis_analysis($analysis) {
 
 /**
  * Themes the contentanalysis sections
- * 
+ *
  * @param $analysis
  *   contentanalysis formated analysis array
  * @param $section
@@ -1251,40 +1251,40 @@ function theme_contentanalysis_analysis($analysis) {
  *   Themed content analysis section
  */
 function theme_contentanalysis_section_analysis($analysis, $section) {
-  
+
   if ($analysis['#context']['inputs']['action'] != 'refresh') {
     $form['report-' . $section] = array(
-      '#type' => 'fieldset',      
-      '#title' => t('Content analysis report'),      
-      '#collapsible' => TRUE,      
-      '#collapsed' => FALSE,   
+      '#type' => 'fieldset',
+      '#title' => t('Content analysis report'),
+      '#collapsible' => TRUE,
+      '#collapsed' => FALSE,
       '#attributes' => array('class' => array('contentanalysis_section_analysis', 'analysis-results', 'contentanalysis-results')),
     );
   }
   $i=0;
   foreach ($analysis AS $aid => $analysisi) {
-    if (!is_array($analysisi) || (substr($aid, 0, 1) == '#') || !is_array($analysisi[$section])  || !isset($analysisi[$section]['output'])) { 
-      continue;  
-    } 
+    if (!is_array($analysisi) || (substr($aid, 0, 1) == '#') || !is_array($analysisi[$section])  || !isset($analysisi[$section]['output'])) {
+      continue;
+    }
     $img = base_path() . '/' . drupal_get_path('module', 'contentanalysis') . '/icons/refresh.png';
-    $form['report-' . $section][$aid . '-report'] = array(    
-      '#type' => 'item',    
-      '#title' => $analysisi['#title'],    
+    $form['report-' . $section][$aid . '-report'] = array(
+      '#type' => 'item',
+      '#title' => $analysisi['#title'],
       '#markup' => $analysisi[$section]['output'],
       '#prefix' => '<div id="contentanalysis-report-' . $aid . '-' . $section .'" class="contentanalysis-report-' . $aid . ' contentanalysis-report-' . $aid . '-' . $section .'">',
       '#suffix' => '</div>',
       '#weight' => $i++,
-    );   
+    );
   }
-  
-  $output = $i ? drupal_render($form) : '';  
-  
+
+  $output = $i ? drupal_render($form) : '';
+
   return $output;
 }
 
 /**
  * Theming function for analysis status report
- * 
+ *
  * @param $analysisi
  *   Content analysis analyzer elements array, e.g. $analysis['seo']
  * @param $show
@@ -1303,55 +1303,55 @@ function theme_contentanalysis_status_report($analysisi, $show = 'all') {
     if ($stats || $msgs) {
       $rows[] = array(
         array(
-          'data' => t('General'), 
+          'data' => t('General'),
           'class' => array('section', $status),
         ),
         array(
-          'data' => $stats . $msgs, 
+          'data' => $stats . $msgs,
           'class' => array('messages')
         )
       );
-    }    
+    }
   }
   if (($show == 'all') || ($show == 'sections')) {
     foreach ($analysisi AS $sid => $analysisis) {
       $stats = isset($analysisis['stats']) ?  theme_contentanalysis_analysis_stats($analysisis['stats']) : '';
       $msgs = isset($analysisis['messages']) ? theme_contentanalysis_analysis_messages($analysisis['messages']) : '';
-      $status = (isset($analysisis['#status']) && $analysisis['#status']) ? $analysisis['#status'] : 'status';      
+      $status = (isset($analysisis['#status']) && $analysisis['#status']) ? $analysisis['#status'] : 'status';
       if ($stats || $msgs) {
         $rows[] = array(
           array(
-            'data' => $analysisis['#title'], 
+            'data' => $analysisis['#title'],
             'class' => array('section', $status),
-          ), 
+          ),
           array(
             'data' => $stats . $msgs,
             'class' => array('messages'),
           )
-        );        
+        );
       }
     }
-  } 
+  }
   elseif ($analysisis = $analysisi[$show]) {
     $stats = isset($analysisis['stats']) ?  theme_contentanalysis_analysis_stats($analysisis['stats']) : '';
     $msgs = isset($analysisis['messages']) ? theme_contentanalysis_analysis_messages($analysisis['messages']) : '';
-    $status = (isset($analysisis['#status']) && $analysisis['#status']) ? $analysisis['#status'] : 'status'; 
+    $status = (isset($analysisis['#status']) && $analysisis['#status']) ? $analysisis['#status'] : 'status';
     if ($stats || $msgs) {
       $rows[] = array(
         array(
-          'data' => $analysisis['#title'], 
+          'data' => $analysisis['#title'],
           'class' => array('section', $status)
         ),
         array(
           'data' => $stats . $msgs,
           'class' => array('messages'),
         ),
-      );       
-    }  
+      );
+    }
   }
   if (count($rows) > 0) {
     $header = array(array('data' => t('Sections')), array('data' => t('Analysis')));
-  
+
     $vars= array(
       'header' => $header,
       'rows' => $rows,
@@ -1364,9 +1364,9 @@ function theme_contentanalysis_status_report($analysisi, $show = 'all') {
 
 /**
  * Theses analysis report stats elements into output
- * 
+ *
  * @param $stats
- *   Analysis stats formated associative array formated by 
+ *   Analysis stats formated associative array formated by
  *   contentanalysis_format_stat()
  * @return
  *   Themed stats section
@@ -1378,16 +1378,16 @@ function theme_contentanalysis_analysis_stats($stats) {
   $output = '<div class="contentanalysis_stats">'."\n";
   $i=0;
   foreach ($stats AS $sid => $item) {
-    $output .= (($i)?', ':'') . $item['#title'] . '=' . number_format($item['#value'], (($item['#decimals'])?$item['#decimals']:0));   
-    $i++; 
+    $output .= (($i)?', ':'') . $item['#title'] . '=' . number_format($item['#value'], (($item['#decimals'])?$item['#decimals']:0));
+    $i++;
   }
-  $output .= "</div>\n";  
+  $output .= "</div>\n";
   return $output;
 }
 
 /**
  * Themes analysis report messages into output
- * 
+ *
  * @param $stats
  *   Analysis messages formated associative array formated by
  *   contentanalysis_format_message()
@@ -1399,7 +1399,7 @@ function theme_contentanalysis_analysis_messages($msgs) {
     return '';
   }
   foreach ($msgs AS $mid => $item) {
-    $items[] = array('class' => array($item['#status']), 'data' => $item['#value']);    
+    $items[] = array('class' => array($item['#status']), 'data' => $item['#value']);
   }
   $vars = array(
     'items' => $items,
@@ -1413,7 +1413,7 @@ function theme_contentanalysis_analysis_messages($msgs) {
 
 /**
  * Themes status messages into output
- * 
+ *
  * @param $stats
  *   Messages formated associative arrayformated by
  *   contentanalysis_format_message()
@@ -1501,7 +1501,7 @@ function contentanalysis_form_alter(&$form, &$form_state, $form_id) {
       return '';
     }
     $node = $form['#node'];
-    
+
     //$form['contentanalysis'] = contentanalysis_node_form($form_state, array(), $node, $settings);
     $form['contentanalysis'] = array(
       '#type' => 'fieldset',
@@ -1511,7 +1511,7 @@ function contentanalysis_form_alter(&$form, &$form_state, $form_id) {
       //'#attributes' => array('class' => 'contentanalysis'),
       '#group' => 'additional_settings',
     );
-    
+
     $form['contentanalysis'] = array_merge($form['contentanalysis'], contentanalysis_analysis_form($form_state, array(), $node, 'node-edit'));
     $form['#submit'][] = 'contentanalysis_node_submit';
   }
@@ -1532,18 +1532,18 @@ function contentanalysis_form_alter(&$form, &$form_state, $form_id) {
         'enable' => t('Enable'),
       ),
       '#default_value' => variable_get('contentanalysis_type_'. $form['#node_type']->type .'_enable', 1) ? array('enable') : array(),
-    ); 
+    );
 /* TODO get analyzer settings working at node_type level
     require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'contentanalysis') . "/contentanalysis.admin.inc";
     $form['contentanalysis'] = array_merge($form['contentanalysis'], contentanalysis_admin_analyzer_settings_element($mode = 'node_type'));
-*/  
+*/
     $form['#submit'][] = 'contentanalysis_node_type_form_submit';
   }
 }
 
 /**
  * Enables/disables content analysis on content type admin form
- * 
+ *
  * @param $form
  *   standard form_api form array
  * @param $form_state
@@ -1564,19 +1564,19 @@ function contentanalysis_node_type_form_submit($form, &$form_state) {
 function contentanalysis_node_submit($form, &$form_state) {
 //print "contentanalysis_node_submit($form, $form_state)";
 //print_r($form_state);
-  $analyzers = contentanalysis_analyzer_info();  
-  
-  foreach ($analyzers AS $aid => $analyzer) {
+  $analyzers = contentanalysis_analyzer_info();
+
+  foreach ($analyzers as $aid => $analyzer) {
     if (isset($analyzer['node form submit callback'])) {
-      $analysis[$aid] = call_user_func($analyzer['node form submit callback'], $form, $form_state);   
+      $analysis[$aid] = call_user_func($analyzer['node form submit callback'], $form, $form_state);
     }
-  } 
+  }
 }
 
 
 /*
 * Implementation of hook_block()
-* 
+*
 * Provides block for launching content analysis.
 */
 function contentanalysis_block($op = 'list', $delta = 0, $edit = array()) {
@@ -1585,10 +1585,10 @@ function contentanalysis_block($op = 'list', $delta = 0, $edit = array()) {
       $blocks['launch']['info'] = t('Content analysis');
       $blocks['launch']['cache'] = BLOCK_NO_CACHE;
       return $blocks;
-  
+
     case 'view':
       if (
-        (arg(0) == 'admin') 
+        (arg(0) == 'admin')
         || ((arg(0) == 'node') && (is_numeric(arg(1))) && (arg(2) == 'edit'))
         || !user_access('perform content analysis')
         ) {
@@ -1597,14 +1597,14 @@ function contentanalysis_block($op = 'list', $delta = 0, $edit = array()) {
       // don't display on node edit forms
       if (!((arg(0) == 'node') && (arg(2) == 'edit') || (arg(1) == 'add'))) {
         $block['content'] = drupal_get_form('contentanalysis_analysis_form', array(), array(), 'block');
-      } 
+      }
       return $block;
   }
 }
 
 /**
  * Returns the aid for a given context
- * 
+ *
  * @param $context
  * @param $save
  *   Boolean to save the aid if it does not already exist
@@ -1612,7 +1612,7 @@ function contentanalysis_block($op = 'list', $delta = 0, $edit = array()) {
  *   aid
  */
 function contentanalysis_get_aid($context, $save = 0) {
-  // save data to db 
+  // save data to db
 //watchdog('ca 1465', print_r($context, 1));
   $aid = NULL;
   $where = '';
@@ -1624,19 +1624,19 @@ function contentanalysis_get_aid($context, $save = 0) {
   if ($context['aid'] > 0) {
     $query->condition('aid', $context['aid']);
     $where = TRUE;
-  } 
+  }
   elseif ($context['nid'] > 0) {
   	$query->condition('nid', $context['nid']);
   	$where = TRUE;
-  } 
+  }
   elseif (!is_null($context['path'])) {
     $query->condition('path', $context['path']);
     $where = TRUE;
-  } 
+  }
   elseif (!is_null($context['url'])) {
     $query->condition('url', $context['url']);
     $where = TRUE;
-  } 
+  }
 
   if ($where && $save) { // by pass db save if analyzing content direct submission
 //watchdog('ca 1491', " " . $query);
@@ -1646,20 +1646,20 @@ function contentanalysis_get_aid($context, $save = 0) {
       'nid' => isset($context['nid']) && $context['nid'] ? $context['nid'] : 0,
       'path' => isset($context['path']) && $context['path'] ? $context['path'] : '',
       'url' => $context['url'],
-    );    
+    );
     if ($result && $result->aid) {
       $aid = $result->aid;
       db_update('contentanalysis')
         ->fields($fields)
         ->condition('aid', $result->aid)
         ->execute();
-    } 
+    }
     // check if all essential fields are set, then save
     elseif (isset($fields['url'])) {
       $context['last_analysis'] = REQUEST_TIME;
       $query = db_insert('contentanalysis')
         ->fields($fields);
-//watchdog('ca 1505', " " . $query);        
+//watchdog('ca 1505', " " . $query);
       $aid = $query->execute();
     }
   }
@@ -1668,7 +1668,7 @@ function contentanalysis_get_aid($context, $save = 0) {
 
 /**
  * Returns the aid for a given node id
- * 
+ *
  * @param $nid
  *   node id for the node of the analysis
  * @return
@@ -1683,7 +1683,7 @@ function contentanalysis_get_aid_by_nid($nid) {
 
 /**
  * Returns the aid for a given url
- * 
+ *
  * @param $url
  *   url of an analysis
  * @return
@@ -1698,25 +1698,25 @@ function contentanalysis_get_aid_by_url($url) {
 
 /**
  * Implements hook_node_delete
- * 
+ *
  * @param $node
  */
-function contentanalysis_node_delete($node) {	
+function contentanalysis_node_delete($node) {
 	$aid = contentanalysis_get_aid_by_nid($node->nid);
 	// call analysis delete callbacks to enable analyzers to delete data
 	$analyzers = contentanalysis_analyzer_info();
   foreach ($analyzers AS $name => $analyzer) {
   	if (isset($analyzer['analysis delete callback'])) {
-      $analysis[$aid] = call_user_func($analyzer['analysis delete callback'], $aid);  
+      $analysis[$aid] = call_user_func($analyzer['analysis delete callback'], $aid);
   	}
   }
   // delete contentanalysis records
   $query = db_delete('contentanalysis_status')
     ->condition('aid', $aid);
-  $query->execute(); 
+  $query->execute();
   $query = db_delete('contentanalysis')
     ->condition('aid', $aid);
-  $query->execute(); 
+  $query->execute();
 }
 
 function contentanalysis_analyzer_info() {
@@ -1729,7 +1729,7 @@ function contentanalysis_analyzer_info() {
     }
     else {
       $analyzers = array();
-      foreach (module_implements('contentanalysis_analyzer_info') as $module) {     
+      foreach (module_implements('contentanalysis_analyzer_info') as $module) {
         foreach (module_invoke($module, 'contentanalysis_analyzer_info') as $name => $analyzer) {
           // Ensure the current toolkit supports the element.
           $analyzer['module'] = $module;
@@ -1738,7 +1738,7 @@ function contentanalysis_analyzer_info() {
         }
       }
       // TODO used to support depricated hook naming convention (renamed to hook_analyzer_info above). Remove this after sufficent time.
-      foreach (module_implements('contentanalysis_analyzers') as $module) {     
+      foreach (module_implements('contentanalysis_analyzers') as $module) {
         foreach (module_invoke($module, 'contentanalysis_analyzers') as $name => $analyzer) {
           // Ensure the current toolkit supports the element.
           $analyzer['module'] = $module;
@@ -1750,5 +1750,5 @@ function contentanalysis_analyzer_info() {
       cache_set("contentanalysis_analyzers", $analyzers);
     }
   }
-  return $analyzers; 
+  return $analyzers;
 }
