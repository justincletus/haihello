<?php

/**
 * @file
 * Auto tag users with content types tags
 *
 * User Auto Tag Module
 *
 * Drupal 7 version:
 * Written by Gianluca Agnocchetti (hiryu)
 */

define('USER_AUTO_TAG_MODULE_TITLE', 'User Auto Tag');
define('USER_AUTO_TAG_PATH_NAME', 'user_auto_tag');
define('USER_AUTO_TAG_TAX_TERM_FIELD', 'field_user_auto_tags');

/**
 * Implements hook_init().
 */
function user_auto_tag_init() {
  module_load_include('inc', USER_AUTO_TAG_PATH_NAME, USER_AUTO_TAG_PATH_NAME . '.functions');
  // Adding CSS and JS just in the admin section.
  if (path_is_admin(current_path())) {
    drupal_add_css(drupal_get_path('module', USER_AUTO_TAG_PATH_NAME) . '/' . USER_AUTO_TAG_PATH_NAME . '.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));
  }
}

/**
 * Implements hook_menu().
 */
function user_auto_tag_menu() {
  $items = array();

  $items['admin/config/workflow/' . USER_AUTO_TAG_PATH_NAME] = array(
    'title' => t(USER_AUTO_TAG_MODULE_TITLE),
    'description' => t('Configure settings for ' . USER_AUTO_TAG_MODULE_TITLE . '.'),
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_auto_tag_setup_form'),
  );
  return $items;
}

/**
 * Implements hook_form().
 */
function user_auto_tag_setup_form($form_state) {
  $node_types = user_auto_tag_get_node_types();

  // Default values for Content types.
  $user_auto_tag_ct_defaul_values = variable_get('user_auto_tag_ct');
  if (empty($user_auto_tag_ct_defaul_values)) {
    $user_auto_tag_ct_defaul_values = array();
  }
  // Default values for Adm exclude.
  $user_auto_tag_adm_exclude_default_value = array(variable_get('user_auto_tag_adm_exclude'));

  $form['#submit'][] = 'user_auto_tag_setup_form_submit';

  // Creating Form.
  $form['user_auto_tag_setup'] = array(
    '#type' => 'fieldset',
    '#title' => t('Setup'),
  );

  // Description.
  $form['user_auto_tag_setup']['user_auto_tag_text'] = array(
    '#markup' => t('Check content types you want pull the tags from, and select the relative field where node tags are stored from the dropdown menu corresponding the content type.'),
  );

  $form['user_auto_tag_setup']['user_auto_tag_line_1'] = array(
    '#markup' => '<hr/>',
  );

  // Administrators exclude field.
  $form['user_auto_tag_setup']['user_auto_tag_adm_exclude'] = array(
    '#type' => 'checkboxes',
    '#options' => array(1 => t('Exclude Administrator users to getting tags from content types')),
    '#default_value' => $user_auto_tag_adm_exclude_default_value,
  );

  $form['user_auto_tag_setup']['user_auto_tag_hml_1'] = array(
    '#markup' => '<br />',
  );

  // Content types field.
  $form['user_auto_tag_setup']['user_auto_tag_ct'] = array(
    '#title' => t('Content types:'),
    '#type' => 'checkboxes',
    '#options' => $node_types,
    '#default_value' => $user_auto_tag_ct_defaul_values,
    '#description' => t('You can select multiple content types.<br />If you uncheck all boxes the module remains active but no tags were applied to the users.'),
  );

  $form['user_auto_tag_setup']['user_auto_tag_line_2'] = array(
    '#markup' => '<hr/>',
  );

  // Tags field fon every content type.
  foreach ($node_types as $key => $node_type) {
    $form['user_auto_tag_setup']['user_auto_tag_field_' . $key] = array(
      '#title' => t('Tags field for ' . $node_type),
      '#type' => 'select',
      '#description' => t('Select tags field for the content type.'),
      '#options' => user_auto_tag_get_fields_list("node", $key),
      '#default_value' => variable_get('user_auto_tag_field_' . $key),
      '#states' => array(
        'invisible' => array(
          ':input[name="user_auto_tag_ct[' . $key . ']"]' => array('checked' => FALSE),
        ),
      ),
    );
  }

  $form['user_auto_tag_setup']['user_auto_tag_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Implements hook_submit().
 */
function user_auto_tag_setup_form_submit($form, &$form_state) {
  // Set variable for exclude adm.
  variable_set('user_auto_tag_adm_exclude', $form_state['values']['user_auto_tag_adm_exclude'][1]);
  if ($form_state['values']['user_auto_tag_adm_exclude'][1]) {
    $msg = t('Tagging for Administrators: Disabled');
  }
  else {
    $msg = t('Tagging for Administrators: Enabled');
  }
  drupal_set_message(check_plain($msg), 'status');

  // Set variable for content types.
  if (!empty($form_state['values']['user_auto_tag_ct'])) {
    // Set content types variable.
    variable_set('user_auto_tag_ct', $form_state['values']['user_auto_tag_ct']);

    // Set tags fields variables.
    foreach ($form_state['values']['user_auto_tag_ct'] as $field) {
      if ($field != '0') {
        variable_set('user_auto_tag_field_' . $field, $form_state['values']['user_auto_tag_field_' . $field]);
      }
    }

    // Set output message for content types.
    foreach ($form_state['values']['user_auto_tag_ct'] as $field) {
      if ($field != '0') {
        $msg = 'Content type set to ' . $field . ' on field ' . $form_state['values']['user_auto_tag_field_' . $field];
        drupal_set_message(check_plain($msg), 'status');
      }
    }
  }
  else {
    // Set content types variable to NULL.
    variable_set('user_auto_tag_ct', NULL);
    $msg = t('Content types not set.');
    drupal_set_message(check_plain($msg), 'status');
  }
}

/**
 * Implements hook_help().
 */
function user_auto_tag_help($section = '') {
  $path = drupal_get_path('module', USER_AUTO_TAG_PATH_NAME);
  $output = '';
  switch ($section) {
    case "admin/help#user_auto_tag":
      $output = file_get_contents($path . "/help.html");
      break;
  }
  return $output;
}

/**
 * Implements hook_permission().
 */
function user_auto_tag_permission() {
  return array(
    USER_AUTO_TAG_MODULE_TITLE => array(
      'title' => t(USER_AUTO_TAG_MODULE_TITLE),
      'description' => t('Perform administration tasks for the module.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Check conditions to exit the module.
 */
function user_auto_tag_exit_check($node) {
  global $user;

  // Exit if node doesn't have tags.
  $node_tags_fields = variable_get('user_auto_tag_field_' . $node->type);
  if (empty($node->$node_tags_fields)) {
    return TRUE;
  }

  // Exit if Administrator and exclude variable is set.
  if ((in_array('Administrator', $user->roles)) && (variable_get('user_auto_tag_adm_exclude') != FALSE)) {
    return TRUE;
  }

  // Exit if in taxonomy term page.
  if (arg(0) == 'taxonomy') {
    return TRUE;
  }
}

/**
 * Implements hook_node_view().
 */
function user_auto_tag_node_view($node, $view_mode, $langcode) {
  $langcode = 'und';
  global $user;

  // Check if exit.
  if (user_auto_tag_exit_check($node)) {
    return;
  }

  $user_tags_field = variable_get(USER_AUTO_TAG_TAX_TERM_FIELD);
  $allowed = variable_get('user_auto_tag_ct');
  if (empty($allowed)) {
    $allowed = array();
  }
  $user = user_load($user->uid);

  if ((in_array($node->type, $allowed)) && (!empty($user->uid))) {
    $node_tags_fields = variable_get('user_auto_tag_field_' . $node->type);

    // Read node tags.
    $nodetags = array();
    $arr = $node->$node_tags_fields;
    foreach ($arr[$langcode] as $tag) {
      if (!empty($tag['taxonomy_term'])) {
        $nodetags[] = $tag['taxonomy_term']->tid;
      }
    }

    // Read user tags.
    $arr = $user->$user_tags_field;
    $i = 0;
    if (!empty($arr)) {
      foreach ($arr[$langcode] as $tag) {
        $usertags[] = $tag['tid'];
        $i++;
      }
    }
    else {
      $usertags = array();
    }

    // Get the tags to apply and create the object.
    $applytags = array_diff($nodetags, $usertags);
    foreach ($applytags as $applytag) {
      $user->field_user_auto_tags[$langcode][]['tid'] = $applytag;
    }

    // Update user with tags.
    $info = field_info_field($user_tags_field);
    $fields = array($info['id']);
    field_sql_storage_field_storage_write('user', $user, 'update', $fields);

    // Clear user cache.
    cache_clear_all("field:user:$user->uid", 'cache_field');
  }
}
